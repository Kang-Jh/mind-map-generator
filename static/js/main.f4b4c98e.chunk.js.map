{"version":3,"sources":["styles/ColorPicker.module.css","styles/ItemsList.module.css","styles/Item.module.css","styles/ListItem.module.css","styles/HowToUse.module.css","styles/InputField.module.css","styles/ToolMenu.module.css","styles/MindMap.module.css","styles/Line.module.css","utils/memoize.ts","atoms/item.ts","atoms/bgColor.ts","components/Item.tsx","components/Line.tsx","components/MindMap.tsx","components/ColorPicker.tsx","components/InputField.tsx","components/ToolMenu.tsx","components/ListItem.tsx","components/HowToUse.tsx","components/ItemsList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","memoize","fn","store","id","idsState","atom","key","default","itemStateWithId","text","radius","top","left","bgColor","fontSize","fontColor","selected","parent","children","totalItemsState","selector","get","map","set","newValue","forEach","index","selectedItemsState","filter","item","linkedItemsState","rootedIdsState","pushSubTree","arr","node","i","length","child","push","subTreeState","root","subTree","mindMapBackgroundColorState","Item","setResizableId","useRecoilState","setItem","useState","isResizing","setIsResizing","diameter","resizeBtnEdge","Math","round","sqrt","pow","resizeBtnPositionX","resizeBtnPositionY","useEffect","state","window","scrollY","scrollX","className","styles","style","width","height","backgroundColor","color","zIndex","onClick","e","stopPropagation","onMouseMove","preventDefault","onMouseDown","resizeBtn","Line","pair","canvasRef","useRef","JSON","parse","parentId","childId","parentItem","useRecoilValue","childItem","parentCenterX","parentCenterY","childCenterX","childCenterY","canvasWidth","abs","canvasHeight","canvasLeft","min","canvasTop","useLayoutEffect","canvas","current","ctx","getContext","beginPath","moveTo","lineTo","stroke","closePath","clearRect","ref","MindMap","ids","setSelectedItems","useSetRecoilState","linkedItems","resizableId","isResized","setIsResized","setResizableItem","scrollTo","MindMapDiv","ctrlKey","movementY","movementX","onMouseUp","ColorPicker","label","setColor","colorPickerRef","isHueMouseDown","setIsHueMouseDown","isSLSelectorMouseDown","setIsSelectorMouseDown","lastColor","setLastColor","isOpened","setIsOpened","h","split","slice","trim","colorPicker","mdoalOpenBtnDiv","button","background","colorPickerModal","offsetTop","SLSelectorWrapper","SLSelector","target","HTMLDivElement","rect","getBoundingClientRect","saturationOfHSV","clientX","value","clientY","lightnessOfHSL","saturationOfHSL","onMouseLeave","toRightGradient","toTopGradient","hueSelector","ceil","colorPickerBtnDiv","confirmBtn","cancelBtn","InputField","type","onChange","inputField","htmlFor","input","ToolMenu","selectedItems","selectedItem","setSelectedItem","mindMapBackgroundColor","setMindMapBackgroundColor","toolMenu","itemForm","parseInt","ListItem","setSubTree","listItem","ul","memo","HowToUse","container","howToUse","descriptionList","btn","ItemsList","nextId","setNextId","setIds","setLinkedIds","rootedIds","setTotalItemsState","isHowToUseOpened","setIsHowToUseOpened","itemsListContainer","buttons","howToUseBtn","addBtn","deleteBtn","includes","el","linkBtn","stringify","itemsList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4b4c98e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorPicker\":\"ColorPicker_colorPicker__zzVOL\",\"colorPickerModal\":\"ColorPicker_colorPickerModal__17oKg\",\"hueSelector\":\"ColorPicker_hueSelector__10_KP\",\"SLSelectorWrapper\":\"ColorPicker_SLSelectorWrapper__38Jkz\",\"SLSelector\":\"ColorPicker_SLSelector__2qDea\",\"toRightGradient\":\"ColorPicker_toRightGradient__H2XPm\",\"toTopGradient\":\"ColorPicker_toTopGradient__2IHnN\",\"button\":\"ColorPicker_button__1oZZG\",\"label\":\"ColorPicker_label__26tm6\",\"mdoalOpenBtnDiv\":\"ColorPicker_mdoalOpenBtnDiv__q-UIp\",\"colorPickerBtnDiv\":\"ColorPicker_colorPickerBtnDiv__1S93A\",\"colorPickerBtn\":\"ColorPicker_colorPickerBtn__3gETJ\",\"confirmBtn\":\"ColorPicker_confirmBtn__2LHv2 ColorPicker_colorPickerBtn__3gETJ\",\"cancelBtn\":\"ColorPicker_cancelBtn__Qxmhp ColorPicker_colorPickerBtn__3gETJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemsListContainer\":\"ItemsList_itemsListContainer__RnmQX\",\"buttons\":\"ItemsList_buttons__2f_KJ\",\"button\":\"ItemsList_button__3dbfr\",\"howToUseBtn\":\"ItemsList_howToUseBtn__3lSyI ItemsList_button__3dbfr\",\"addBtn\":\"ItemsList_addBtn__2jwN9 ItemsList_button__3dbfr\",\"deleteBtn\":\"ItemsList_deleteBtn__36nOF ItemsList_button__3dbfr\",\"linkBtn\":\"ItemsList_linkBtn__3_AW4 ItemsList_button__3dbfr\",\"itemsList\":\"ItemsList_itemsList__3Hf8Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Item_item__3BcJs\",\"selected\":\"Item_selected__2U9yC\",\"text\":\"Item_text__1iht3\",\"resizeBtn\":\"Item_resizeBtn__31SuI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ListItem_listItem__32bkM\",\"ul\":\"ListItem_ul__pAyjb\",\"selected\":\"ListItem_selected__1hjLk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"HowToUse_container__PyROk\",\"howToUse\":\"HowToUse_howToUse__JsIkS\",\"descriptionList\":\"HowToUse_descriptionList__19RRn\",\"btn\":\"HowToUse_btn__1UNg4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"InputField_inputField__1k_eH\",\"label\":\"InputField_label__5RLQ4\",\"input\":\"InputField_input__19AeP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toolMenu\":\"ToolMenu_toolMenu__14uKT\",\"itemForm\":\"ToolMenu_itemForm__2a-zJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MindMapDiv\":\"MindMap_MindMapDiv__3uJ2t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"Line_canvas__3eKzf\"};","import { RecoilState } from 'recoil';\r\n\r\n/**\r\n * 복잡한 메모이제이션이 필요하지 않을 것이라고 판단해서\r\n * 서드파티 라이브러리를 쓰는 것이 아니라 직접 구현한 함수\r\n *\r\n * id를 인자로 받아 RecoilState를 반환하는 함수를 인자로 받아서\r\n * id값으로 이미 RecoilState가 만들어져있다면 그것을 반환하고\r\n * 만들어지지 않았다면 새로 만들어서 store에 저장 후 반환\r\n *\r\n * 가장 기본적인 클로저 사용법 중 하나\r\n *\r\n * @param fn RecoilState(atom 함수의 반환값)를 반환하는 함수\r\n * @returns {function} 메모이제이션된 함수\r\n */\r\nfunction memoize<T = any>(\r\n  fn: (id: number) => RecoilState<T>\r\n): (id: number) => RecoilState<T> {\r\n  const store: { [key: number]: any } = {};\r\n\r\n  return function (id: number) {\r\n    if (store[id]) {\r\n      return store[id];\r\n    }\r\n\r\n    store[id] = fn(id);\r\n\r\n    return store[id];\r\n  };\r\n}\r\n\r\nexport { memoize };\r\n","import { atom, GetRecoilValue, selector } from 'recoil';\r\nimport { memoize } from '../utils/memoize';\r\n\r\nexport interface ItemInterface {\r\n  id: number;\r\n  text: string;\r\n  radius: number; // 반지름\r\n  top: number;\r\n  left: number;\r\n  bgColor: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  selected: boolean;\r\n  parent: number | null;\r\n  children: number[];\r\n}\r\n\r\nexport const idsState = atom<number[]>({\r\n  key: 'itemsState',\r\n  default: [],\r\n});\r\n\r\n// 아이디를 인자로 받아 원자를 반환\r\nexport const itemStateWithId = memoize((id) =>\r\n  atom<ItemInterface>({\r\n    key: `item${id}State`,\r\n    default: {\r\n      id: id,\r\n      text: `item ${id}`,\r\n      radius: 50,\r\n      top: 0,\r\n      left: 0,\r\n      bgColor: 'hsl(0,0%,90%)',\r\n      fontSize: 16,\r\n      fontColor: 'hsl(0,0%,0%)',\r\n      selected: false,\r\n      parent: null,\r\n      children: [],\r\n    },\r\n  })\r\n);\r\n\r\nexport const totalItemsState = selector<ItemInterface[]>({\r\n  key: 'totalItemsSelector',\r\n  get: ({ get }) => {\r\n    const ids = get(idsState);\r\n\r\n    return ids.map((id) => get(itemStateWithId(id)));\r\n  },\r\n  set: ({ get, set }, newValue) => {\r\n    const ids = get(idsState);\r\n\r\n    ids.forEach((id, index) => {\r\n      set(itemStateWithId(id), (newValue as ItemInterface[])[index]);\r\n    });\r\n  },\r\n});\r\n\r\n// 선택된 아이디들을 통해 얻어지는 아이디들을 반환하는 선택자\r\nexport const selectedItemsState = selector<ItemInterface[]>({\r\n  key: 'selectedItemsState',\r\n  get: ({ get }) => {\r\n    const ids = get(idsState);\r\n\r\n    const items = ids\r\n      .map((id) => get(itemStateWithId(id)))\r\n      .filter((item) => item.selected);\r\n\r\n    return items;\r\n  },\r\n  set: ({ get, set }, newValue) => {\r\n    const items = get(selectedItemsState);\r\n\r\n    items.forEach((item, index) => {\r\n      set(itemStateWithId(item.id), (newValue as ItemInterface[])[index]);\r\n    });\r\n  },\r\n});\r\n\r\n/**\r\n * string[]에서 string은 JSON.stringify를 통해 number[]를 문자열화 시킨 것임\r\n */\r\nexport const linkedItemsState = atom<string[]>({\r\n  key: 'linkedItemsState',\r\n  default: [],\r\n});\r\n\r\n// 부모가 없는 아이템들의 아이디들 선택자\r\nexport const rootedIdsState = selector<number[]>({\r\n  key: 'rootedIdsState',\r\n  get: ({ get }) => {\r\n    const ids = get(idsState);\r\n\r\n    const rootedIds = ids\r\n      .map((id) => get(itemStateWithId(id)))\r\n      .filter((item) => item.parent === null)\r\n      .map((item) => item.id);\r\n\r\n    return rootedIds;\r\n  },\r\n});\r\n\r\n/**\r\n * 특정 아이템의 모든 자손 아이템을 만들기 위한 함수로\r\n * 주어진 배열에 모든 자손 아이템들을 추가한다\r\n */\r\nfunction pushSubTree(\r\n  arr: ItemInterface[],\r\n  node: ItemInterface,\r\n  get: GetRecoilValue\r\n) {\r\n  for (let i = 0; i < node.children.length; i++) {\r\n    const child = get(itemStateWithId(node.children[i]));\r\n    arr.push(child);\r\n    pushSubTree(arr, child, get);\r\n  }\r\n}\r\n\r\n/**\r\n * 주어진 아이디의 모든 하위 아이템을 반환하는 선택자\r\n */\r\nexport const subTreeState = memoize<ItemInterface[]>((id) =>\r\n  selector({\r\n    key: `$subTreeStateOf${id}`,\r\n    get: ({ get }) => {\r\n      const root = get(itemStateWithId(id));\r\n      const subTree: ItemInterface[] = [root];\r\n      pushSubTree(subTree, root, get);\r\n      return subTree;\r\n    },\r\n    set: ({ get, set }, newValue) => {\r\n      const subTree = get(subTreeState(id));\r\n\r\n      subTree.forEach((node, index) =>\r\n        set(itemStateWithId(node.id), (newValue as ItemInterface[])[index])\r\n      );\r\n    },\r\n  })\r\n);\r\n","import { atom } from 'recoil';\n\nexport const mindMapBackgroundColorState = atom({\n  key: 'mindMapBackgroundColor',\n  default: 'hsl(0,0%,100%)',\n});\n","import styles from '../styles/Item.module.css';\r\nimport { useRecoilState } from 'recoil';\r\nimport { itemStateWithId } from '../atoms';\r\nimport { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\n\r\nexport default function Item({\r\n  id,\r\n  setResizableId,\r\n}: {\r\n  id: number;\r\n  setResizableId: Dispatch<SetStateAction<number>>;\r\n}) {\r\n  const [item, setItem] = useRecoilState(itemStateWithId(id));\r\n  const [isResizing, setIsResizing] = useState(false);\r\n  // 지름\r\n  const diameter = item.radius * 2;\r\n  // a^2 + a^2 = r^2\r\n  // 제 3사분면 45도 위치에 버튼을 놓으려면\r\n  // 45도 위치에서 x축으로 수선을 내리고 빗변이 아닌 변의 길이(a)를 구해야 함\r\n  // 탄젠트 45도는 1이고 이등변 직각삼각형이므로 한 변의 길이는\r\n  // 피타고라스 정리에 의해 a^2 + a^2 = r^2을 만족시키게 됨\r\n  // 이 변의 길이는 (a^2 / 2)의 제곱근이됨\r\n  const resizeBtnEdge = Math.round(Math.sqrt(Math.pow(item.radius, 2) / 2));\r\n  // 제 3사분면에 위치시켜야 하므로 반지름에 변의 길이를 더해줌\r\n  const resizeBtnPositionX = item.radius + resizeBtnEdge;\r\n  // 제 3사분면에 위치시켜야 하므로 반지름에 변의 길이를 더해줌\r\n  const resizeBtnPositionY = item.radius + resizeBtnEdge;\r\n\r\n  // 아이템 생성 시 위치를 설정하는 이펙트\r\n  useEffect(() => {\r\n    // 현재 화면의 왼쪽 상단에 위치하게 변경\r\n    setItem((state) => ({\r\n      ...state,\r\n      top: window.scrollY + 150,\r\n      left: window.scrollX + 350,\r\n    }));\r\n  }, [setItem]);\r\n\r\n  return (\r\n    <div\r\n      className={`${styles.item} ${item.selected ? styles.selected : ''}`}\r\n      style={{\r\n        width: `${diameter}px`,\r\n        height: `${diameter}px`,\r\n        backgroundColor: item.bgColor,\r\n        fontSize: `${item.fontSize}px`,\r\n        color: `${item.fontColor}`,\r\n        top: item.top,\r\n        left: item.left,\r\n        zIndex: item.selected ? 2 : 1,\r\n      }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        if (isResizing) {\r\n          setIsResizing(false);\r\n          return;\r\n        }\r\n\r\n        // 선택 또는 선택해제시킴\r\n        setItem((state) => ({\r\n          ...state,\r\n          selected: !state.selected,\r\n        }));\r\n      }}\r\n      // 텍스트 드래그 방지\r\n      onMouseMove={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // 텍스트 드래그 방지\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      {item.selected && (\r\n        // 리사이즈 버튼\r\n        <div\r\n          className={styles.resizeBtn}\r\n          style={{ top: resizeBtnPositionY - 5, left: resizeBtnPositionX - 5 }}\r\n          onClick={(e) => {\r\n            // 버블링시 상위 엘리먼트에서 클릭 이벤트 발생을 막음\r\n            e.stopPropagation();\r\n          }}\r\n          // 마우스를 눌렀을 때 이 아이템이 리사이징 중이라는 것을 저장\r\n          onMouseDown={() => {\r\n            setResizableId(id);\r\n            setIsResizing(true);\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* 텍스트 필드 */}\r\n      <span className={styles.text}>{item.text}</span>\r\n    </div>\r\n  );\r\n}\r\n","import styles from '../styles/Line.module.css';\nimport { useLayoutEffect, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { itemStateWithId } from '../atoms';\n\n/**\n *\n * @param {string} pair stringified number array which contains parent and child in order\n */\nexport default function Line({ pair }: { pair: string }) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [parentId, childId] = JSON.parse(pair);\n  const parentItem = useRecoilValue(itemStateWithId(parentId));\n  const childItem = useRecoilValue(itemStateWithId(childId));\n  // 부모 아이템의 중심의 X, Y 좌표\n  const parentCenterX = parentItem.left + parentItem.radius;\n  const parentCenterY = parentItem.top + parentItem.radius;\n  // 자식 아이템의 중심의 X, Y 좌표\n  const childCenterX = childItem.left + childItem.radius;\n  const childCenterY = childItem.top + childItem.radius;\n  const canvasWidth = Math.abs(parentCenterX - childCenterX);\n  const canvasHeight = Math.abs(parentCenterY - childCenterY);\n  const canvasLeft = Math.min(parentCenterX, childCenterX);\n  const canvasTop = Math.min(parentCenterY, childCenterY);\n\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (ctx) {\n      ctx.beginPath();\n      // 부모 아이템의 중심으로 이동\n      ctx.moveTo(\n        Math.abs(canvasLeft - parentCenterX),\n        Math.abs(canvasTop - parentCenterY)\n      );\n      // 자식 아이템의 중심까지 선을 그음\n      ctx.lineTo(\n        Math.abs(canvasLeft - childCenterX),\n        Math.abs(canvasTop - childCenterY)\n      );\n      // 선에 outline을 그림\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    return () => {\n      if (ctx) {\n        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      }\n    };\n  }, [\n    canvasHeight,\n    canvasLeft,\n    canvasTop,\n    canvasWidth,\n    childCenterX,\n    childCenterY,\n    parentCenterX,\n    parentCenterY,\n  ]);\n\n  return (\n    <canvas\n      className={styles.canvas}\n      ref={canvasRef}\n      width={canvasWidth ? canvasWidth : 1}\n      height={canvasHeight ? canvasHeight : 1}\n      style={{\n        top: canvasTop,\n        left: canvasLeft,\n      }}\n    >\n      {parentItem.text}과 {childItem.text}를 잇는 연결선\n    </canvas>\n  );\n}\n","import { useEffect, useState } from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport {\r\n  idsState,\r\n  itemStateWithId,\r\n  linkedItemsState,\r\n  mindMapBackgroundColorState,\r\n  selectedItemsState,\r\n} from '../atoms';\r\nimport styles from '../styles/MindMap.module.css';\r\nimport Item from './Item';\r\nimport Line from './Line';\r\n\r\nexport default function MindMap() {\r\n  const ids = useRecoilValue(idsState);\r\n  const backgroundColor = useRecoilValue(mindMapBackgroundColorState);\r\n  const setSelectedItems = useSetRecoilState(selectedItemsState);\r\n  const linkedItems = useRecoilValue(linkedItemsState);\r\n  const [resizableId, setResizableId] = useState(0);\r\n  const [isResized, setIsResized] = useState(false);\r\n  const setResizableItem = useSetRecoilState(itemStateWithId(resizableId));\r\n\r\n  // 마인드맵의 대략 중간부터 실행되게 수정\r\n  useEffect(() => {\r\n    window.scrollTo(2000, 2000);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{ backgroundColor }}\r\n      className={styles.MindMapDiv}\r\n      // 바탕을 클릭하면 선택된 모든 아이템들이 풀리도록 onClick 프로퍼티 설정\r\n      onClick={() => {\r\n        // 만약 최근에 어떤 아이템이 리사이즈 되었다면\r\n        // 모든 아이템의 선택을 취소하지 않음\r\n        if (isResized) {\r\n          setIsResized(false);\r\n          return;\r\n        }\r\n\r\n        setSelectedItems((state) =>\r\n          state.map((item) => ({ ...item, selected: false }))\r\n        );\r\n      }}\r\n      onMouseDown={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n      // 컨트롤 키를 누르고 마우스를 움직이면 선택된 모든 아이템들이 움직이도록 onMouseMove 설정\r\n      onMouseMove={(e) => {\r\n        e.preventDefault();\r\n        if (e.ctrlKey) {\r\n          setSelectedItems((state) =>\r\n            state.map((item) => ({\r\n              ...item,\r\n              top: item.top + e.movementY,\r\n              left: item.left + e.movementX,\r\n            }))\r\n          );\r\n\r\n          return;\r\n        }\r\n\r\n        if (resizableId) {\r\n          setResizableItem((state) => ({\r\n            ...state,\r\n            radius: Math.round(Math.abs(state.radius + e.movementX / 2)),\r\n          }));\r\n        }\r\n      }}\r\n      onMouseUp={() => {\r\n        // 만약 어떤 아이템을 resizing 중이라면 마우스 버튼이 올라올 때\r\n        // 어떤 아이템을 리사이즈하지 않고\r\n        // 최근에 리사이즈 되었다는 것을 저장하여\r\n        // 클릭 이벤트에서 사용될 수 있도록 함\r\n        if (resizableId) {\r\n          setResizableId(0);\r\n          setIsResized(true);\r\n        }\r\n      }}\r\n    >\r\n      {ids.map((id) => (\r\n        <Item key={id} id={id} setResizableId={setResizableId} />\r\n      ))}\r\n\r\n      {linkedItems.map((pair) => (\r\n        <Line key={pair} pair={pair} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import styles from '../styles/ColorPicker.module.css';\nimport { useRef, useState } from 'react';\n\n/**\n * setColor는 color를 인자로 받아서 어떤 식으로 상태를 업데이트 할 것인지를 나타내는 함수입니다\n * @param {string} label 컬러 피커의 대상을 명시하는 문자열\n * @param {string} color hsl() 형태인 문자열\n * @param {(color: string) => void} setColor color를 인자로 받아 내부적으로 상태 업데이트를 실행하는 함수\n */\nexport default function ColorPicker({\n  label,\n  color,\n  setColor,\n}: {\n  label: string;\n  color: string;\n  setColor: (color: string) => void;\n}) {\n  // 모달의 위치를 정하기 위한 ref\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // 색상을 선택하는 직선 모양의 컬러 피커를 마우스로 눌렀는지 여부\n  const [isHueMouseDown, setIsHueMouseDown] = useState(false);\n  // 채도와 밝기를 선택하는 직사각형 모양의 컬러 피커를 마우스로 눌렀는지 여부\n  const [isSLSelectorMouseDown, setIsSelectorMouseDown] = useState(false);\n  // 이전 컬러로 되돌리기 위한 상태\n  const [lastColor, setLastColor] = useState(color);\n  // 컬러 피커 모달이 열렸는지를 저장하는 상태\n  const [isOpened, setIsOpened] = useState(false);\n  // 주어진 color에서 색상(Hue)를 나타내는 값\n  const h = color.split(',')[0].slice(4).trim();\n\n  return (\n    <div className={styles.colorPicker} ref={colorPickerRef}>\n      {/* 색상 버튼 */}\n      <div className={styles.mdoalOpenBtnDiv}>\n        <span className={styles.label}>{label}</span>\n        <button\n          className={styles.button}\n          style={{\n            background: color,\n          }}\n          onClick={() => {\n            setLastColor(color);\n            setIsOpened(true);\n          }}\n        />\n      </div>\n\n      {isOpened && (\n        <div\n          className={styles.colorPickerModal}\n          style={{\n            top: `calc(15% + ${colorPickerRef.current?.offsetTop ?? 0}px)`,\n          }}\n        >\n          <div className={styles.SLSelectorWrapper}>\n            <div\n              className={styles.SLSelector}\n              style={{\n                background: `hsl(${h}, 100%, 50%)`,\n              }}\n              onMouseDown={(e) => {\n                setIsSelectorMouseDown(true);\n                if (e.target instanceof HTMLDivElement) {\n                  // 타겟 직사각형\n                  const rect = e.target.getBoundingClientRect();\n                  // HSV에서의 채도값으로\n                  // 현재 마우스의 위치의 x좌표에서 직사각형의 x좌표 시작점을 뺀 값을\n                  // 타겟의 width 1% 당 픽셀로 나눈 값\n                  const saturationOfHSV = Math.round(\n                    (e.clientX - rect.left) / (rect.width / 100)\n                  );\n                  // HSV에서의 명도값으로\n                  // 가장 위가 100이므로 100에서 빼줘야 함\n                  // 명도값은 현재 마우스의 Y좌표에서 타겟 직사각형의 시작 Y좌표를 빼준 값을\n                  // 타겟의 height 1%당 픽셀로 나눈 값\n                  const value =\n                    100 -\n                    Math.round((e.clientY - rect.top) / (rect.height / 100));\n\n                  // HSL에서의 밝기 값으로\n                  // HSV에서의 명도에 HSV에서의 채도를 2로 나눈 값을 100에서 뺀 값을 곱해준 후 100으로 나눈 값\n                  const lightnessOfHSL = Math.round(\n                    (value * (100 - saturationOfHSV / 2)) / 100\n                  );\n                  // HSL에서의 채도 값으로\n                  // HSL에서의 밝기 값이 0%이거나 100%인 경우 채도 값은 0\n                  // 이외의 경우에는 HSV에서의 명도 값에서 HSL에서의 밝기 값을 뺀 값을\n                  // HSL의 밝기값과 100 - HSL의 밝기 값 중 작은 값으로 나눈 후\n                  // 100을 곱해준 값\n                  const saturationOfHSL =\n                    lightnessOfHSL === 0 || lightnessOfHSL === 100\n                      ? 0\n                      : Math.round(\n                          ((value - lightnessOfHSL) /\n                            Math.min(lightnessOfHSL, 100 - lightnessOfHSL)) *\n                            100\n                        );\n\n                  setColor(\n                    `hsl(${h}, ${saturationOfHSL}%, ${lightnessOfHSL}%)`\n                  );\n                }\n              }}\n              onMouseMove={(e) => {\n                if (\n                  isSLSelectorMouseDown &&\n                  e.target instanceof HTMLDivElement\n                ) {\n                  const rect = e.target.getBoundingClientRect();\n                  const saturationOfHSV = Math.round(\n                    (e.clientX - rect.left) / (rect.width / 100)\n                  );\n                  const value =\n                    100 -\n                    Math.round((e.clientY - rect.top) / (rect.height / 100));\n\n                  const lightnessOfHSL = Math.round(\n                    (value * (100 - saturationOfHSV / 2)) / 100\n                  );\n                  const saturationOfHSL =\n                    lightnessOfHSL === 0 || lightnessOfHSL === 100\n                      ? 0\n                      : Math.round(\n                          ((value - lightnessOfHSL) /\n                            Math.min(lightnessOfHSL, 100 - lightnessOfHSL)) *\n                            100\n                        );\n\n                  setColor(\n                    `hsl(${h}, ${saturationOfHSL}%, ${lightnessOfHSL}%)`\n                  );\n                }\n              }}\n              onMouseUp={(e) => {\n                setIsSelectorMouseDown(false);\n              }}\n              onMouseLeave={(e) => {\n                setIsSelectorMouseDown(false);\n              }}\n            >\n              <div className={styles.toRightGradient}>\n                <div className={styles.toTopGradient} />\n              </div>\n            </div>\n          </div>\n\n          {/* 색조 선택 영역 */}\n          <div\n            className={styles.hueSelector}\n            onMouseDown={(e) => {\n              e.stopPropagation();\n              setIsHueMouseDown(true);\n              if (e.target instanceof HTMLDivElement) {\n                const rect = e.target.getBoundingClientRect();\n                const h = Math.ceil(\n                  // 색상 값은\n                  // 현재 마우스가 타겟의 시작 x좌표에서 얼마나 떨어져있는지를 나타내는 값에\n                  // 1픽셀 당 몇 도인지를 곱해준 값\n                  (e.clientX - rect.left) * (360 / rect.width)\n                );\n                setColor(`hsl(${h}, 100%, 50%)`);\n              }\n            }}\n            onMouseMove={(e) => {\n              e.stopPropagation();\n              if (isHueMouseDown && e.target instanceof HTMLDivElement) {\n                const rect = e.target.getBoundingClientRect();\n                const h = Math.ceil(\n                  (e.clientX - rect.left) * (360 / rect.width)\n                );\n                setColor(`hsl(${h}, 100%, 50%)`);\n              }\n            }}\n            onMouseUp={(e) => {\n              e.stopPropagation();\n              setIsHueMouseDown(false);\n            }}\n            onMouseLeave={(e) => {\n              e.stopPropagation();\n              setIsHueMouseDown(false);\n            }}\n          ></div>\n\n          {/* 버튼 영역 */}\n          <div className={styles.colorPickerBtnDiv}>\n            <button\n              className={styles.confirmBtn}\n              onClick={() => {\n                setIsOpened(false);\n              }}\n            >\n              확인\n            </button>\n\n            <button\n              className={styles.cancelBtn}\n              onClick={() => {\n                setColor(lastColor);\n                setIsOpened(false);\n              }}\n            >\n              취소\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import styles from '../styles/InputField.module.css';\nimport { ChangeEvent } from 'react';\n\nexport default function InputField({\n  label,\n  id,\n  type,\n  value,\n  onChange,\n}: {\n  label: string;\n  id: string;\n  type: string;\n  value: string | number;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n}) {\n  return (\n    <div className={styles.inputField}>\n      <label className={styles.label} htmlFor={id}>\n        {label}\n      </label>\n      <input\n        className={styles.input}\n        id={id}\n        type={type}\n        value={value}\n        onChange={onChange}\n      />\n    </div>\n  );\n}\n","import styles from '../styles/ToolMenu.module.css';\nimport { useRecoilState } from 'recoil';\nimport {\n  selectedItemsState,\n  itemStateWithId,\n  mindMapBackgroundColorState,\n} from '../atoms';\nimport ColorPicker from './ColorPicker';\nimport InputField from './InputField';\n\nexport default function ToolMenu() {\n  const [selectedItems, setSelectedItems] = useRecoilState(selectedItemsState);\n  const [selectedItem, setSelectedItem] = useRecoilState(\n    itemStateWithId(selectedItems[0]?.id ?? 0)\n  );\n  const [mindMapBackgroundColor, setMindMapBackgroundColor] = useRecoilState(\n    mindMapBackgroundColorState\n  );\n\n  return (\n    <div className={styles.toolMenu}>\n      <div>마인드 맵</div>\n\n      <ColorPicker\n        label=\"배경 색상\"\n        color={mindMapBackgroundColor}\n        setColor={(color) => setMindMapBackgroundColor(color)}\n      />\n\n      {/* 부등호를 써준 이유는 selectedItems.length 로 할 경우 길이가 0일 때 화면에 0이 표시되기 때문임 */}\n      {selectedItems.length > 0 && (\n        <div className={styles.itemForm}>\n          <div>아이템</div>\n\n          <ColorPicker\n            label=\"배경 색상\"\n            color={selectedItem.bgColor}\n            setColor={(color) =>\n              setSelectedItems((state) =>\n                state.map((item) => ({ ...item, bgColor: color }))\n              )\n            }\n          />\n\n          <InputField\n            label=\"반지름\"\n            type=\"number\"\n            id=\"itemRadius\"\n            value={selectedItem.radius ? selectedItem.radius : ''}\n            onChange={(e) =>\n              setSelectedItems((state) =>\n                state.map((item) => ({\n                  ...item,\n                  radius: e.target.value ? parseInt(e.target.value) : 0,\n                }))\n              )\n            }\n          />\n\n          <InputField\n            label=\"폰트 크기\"\n            id=\"fontSize\"\n            type=\"number\"\n            value={selectedItem.fontSize ? selectedItem.fontSize : ''}\n            onChange={(e) =>\n              setSelectedItems((state) =>\n                state.map((item) => ({\n                  ...item,\n                  fontSize: e.target.value ? parseInt(e.target.value) : 0,\n                }))\n              )\n            }\n          />\n\n          <ColorPicker\n            label=\"폰트 색상\"\n            color={selectedItem.fontColor}\n            setColor={(color) =>\n              setSelectedItems((state) =>\n                state.map((item) => ({ ...item, fontColor: color }))\n              )\n            }\n          />\n\n          {selectedItems.length === 1 && (\n            <>\n              <InputField\n                label=\"내용\"\n                id=\"itemText\"\n                type=\"text\"\n                value={selectedItem.text}\n                onChange={(e) =>\n                  setSelectedItem((state) => ({\n                    ...state,\n                    text: e.target.value,\n                  }))\n                }\n              />\n\n              <InputField\n                label=\"X 좌표\"\n                id=\"positionX\"\n                type=\"number\"\n                value={selectedItem.left ? selectedItem.left : ''}\n                onChange={(e) =>\n                  setSelectedItem((state) => ({\n                    ...state,\n                    left: e.target.value ? parseInt(e.target.value) : 0,\n                  }))\n                }\n              />\n\n              <InputField\n                label=\"Y 좌표\"\n                id=\"positionY\"\n                type=\"number\"\n                value={selectedItem.top ? selectedItem.top : ''}\n                onChange={(e) =>\n                  setSelectedItem((state) => ({\n                    ...state,\n                    top: e.target.value ? parseInt(e.target.value) : 0,\n                  }))\n                }\n              />\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import styles from '../styles/ListItem.module.css';\nimport { memo } from 'react';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { itemStateWithId, subTreeState } from '../atoms';\n\n/**\n * 리스트 아이템은 왼쪽 사이드바에서 렌더링되는 개별 아이템들로\n * 재귀적으로 자식들을 렌더링함\n * @returns\n */\nfunction ListItem({ id }: { id: number }) {\n  const [item, setItem] = useRecoilState(itemStateWithId(id));\n  const setSubTree = useSetRecoilState(subTreeState(id));\n\n  return (\n    <div>\n      <button\n        className={\n          item.selected\n            ? `${styles.selected} ${styles.listItem}`\n            : `${styles.listItem}`\n        }\n        onClick={(e) => {\n          e.stopPropagation();\n          setItem((state) => ({ ...state, selected: !state.selected }));\n          setSubTree((state) =>\n            state.map((node) => ({ ...node, selected: !item.selected }))\n          );\n        }}\n      >\n        {item.text}\n      </button>\n\n      {item.children.length > 0 && (\n        <ul className={styles.ul}>\n          {item.children.map((id) => (\n            <li key={id}>\n              <ListItem id={id} />\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default memo(ListItem);\n","import styles from '../styles/HowToUse.module.css';\nimport { Dispatch, SetStateAction } from 'react';\n\nexport default function HowToUse({\n  isOpened,\n  setIsOpened,\n}: {\n  isOpened: boolean;\n  setIsOpened: Dispatch<SetStateAction<boolean>>;\n}) {\n  if (!isOpened) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.howToUse}>\n        <h2>마인드 맵 생성기 사용 방법</h2>\n        <ul className={styles.descriptionList}>\n          <li>\n            <p>\n              아이템을 선택하려면 왼쪽 아이템 목록에 있는 아이템을 클릭하시거나\n              마인드맵에 있는 아이템을 클릭하시면 됩니다.\n            </p>\n          </li>\n\n          <li>\n            <p>\n              아이템들을 선택한 후 왼쪽 Ctrl 키를 누른 채로 마우스를 움직이면\n              선택된 모든 아이템들이 움직입니다.\n            </p>\n          </li>\n\n          <li>\n            <p>\n              마인드맵 배경을 클릭하시면 선택된 모든 아이템들이 선택 해제됩니다.\n            </p>\n          </li>\n\n          <li>\n            <p>아이템 삭제는 선택된 모든 아이템들을 삭제합니다.</p>\n          </li>\n\n          <li>\n            <p>\n              2개의 아이템이 선택되었을 때 연결하기 버튼이 나타납니다. 단,\n              연결하기 버튼을 클릭하더라도 아이템들이 연결될 수 없는 경우\n              연결되지 않습니다.\n            </p>\n          </li>\n\n          <li>\n            <p>\n              서로 직접적으로 연결된 2개의 아이템이 선택되었을 때 연결 해제\n              버튼이 나타납니다.\n            </p>\n          </li>\n\n          <li>\n            연결의 경우 선택된 순서에 상관 없이 항상 먼저 생성된 아이템이 상위\n            개념이 됩니다.\n          </li>\n        </ul>\n\n        <button className={styles.btn} onClick={() => setIsOpened(false)}>\n          닫기\n        </button>\n      </div>\n    </div>\n  );\n}\n","import styles from '../styles/ItemsList.module.css';\nimport { useState } from 'react';\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport {\n  idsState,\n  linkedItemsState,\n  rootedIdsState,\n  selectedItemsState,\n  totalItemsState,\n} from '../atoms';\nimport ListItem from './ListItem';\nimport HowToUse from './HowToUse';\n\nexport default function ItemsList() {\n  const [nextId, setNextId] = useState(1);\n  const setIds = useSetRecoilState(idsState);\n  const setLinkedIds = useSetRecoilState(linkedItemsState);\n  const [selectedItems, setSelectedItems] = useRecoilState(selectedItemsState);\n  const rootedIds = useRecoilValue(rootedIdsState);\n  const setTotalItemsState = useSetRecoilState(totalItemsState);\n  const [isHowToUseOpened, setIsHowToUseOpened] = useState(false);\n\n  return (\n    <>\n      <div className={styles.itemsListContainer}>\n        <div className={styles.buttons}>\n          <button\n            className={styles.howToUseBtn}\n            onClick={() => setIsHowToUseOpened(true)}\n          >\n            사용법\n          </button>\n\n          <button\n            className={styles.addBtn}\n            onClick={() => {\n              setIds((state) => [...state, nextId]);\n              setNextId(nextId + 1);\n            }}\n          >\n            아이템 생성\n          </button>\n\n          <button\n            className={styles.deleteBtn}\n            onClick={() => {\n              for (let i = 0; i < selectedItems.length; i++) {\n                const id = selectedItems[i].id;\n\n                setLinkedIds((state) =>\n                  state.filter((pair) => !JSON.parse(pair).includes(id))\n                );\n\n                setIds((state) => state.filter((el) => el !== id));\n\n                setTotalItemsState((state) =>\n                  state.map((item) => ({\n                    ...item,\n                    // 부모가 삭제되는 경우면 null로 그렇지 않은 경우엔 현재 부모를 그대로 사용\n                    parent: item.parent === id ? null : item.parent,\n                    // 자식 목록에 삭제되는 id가 있으면 필터링\n                    // 자식 목록에 삭제되는 id가 없으면 현재 자식 목록 그대로 사용\n                    children: item.children.includes(id)\n                      ? item.children.filter((el) => el !== id)\n                      : item.children,\n                  }))\n                );\n              }\n            }}\n          >\n            아이템 삭제\n          </button>\n\n          {/* 연결 버튼 */}\n          {selectedItems.length === 2 && (\n            <button\n              className={styles.linkBtn}\n              onClick={() => {\n                const parent = selectedItems[0];\n                const child = selectedItems[1];\n\n                if (child.parent === parent.id) {\n                  // 자식의 부모 아이디와 현재 선택된 부모 아이디가 같은 경우\n                  // 연결 해제시키고 linkedIds에서 아이디 쌍을 삭제\n\n                  setSelectedItems((state) =>\n                    state.map((item) => ({\n                      ...item,\n                      parent: item.id === child.id ? null : item.parent,\n                      children:\n                        item.id === parent.id\n                          ? item.children.filter((id) => id !== child.id)\n                          : item.children,\n                    }))\n                  );\n\n                  setLinkedIds((state) =>\n                    state.filter(\n                      (pair) => pair !== JSON.stringify([parent.id, child.id])\n                    )\n                  );\n                } else if (child.parent === null) {\n                  // 자식의 부모가 아직 설정되지 않은 경우\n                  // 부모와 자식을 연결 시키고 linkedIds에 아이디 쌍을 추가\n                  setSelectedItems((state) =>\n                    state.map((item) => ({\n                      ...item,\n                      parent: item.id === parent.id ? item.parent : parent.id,\n                      children:\n                        item.id === parent.id\n                          ? [...item.children, child.id]\n                          : item.children,\n                    }))\n                  );\n\n                  setLinkedIds((state) => {\n                    const pair = JSON.stringify([parent.id, child.id]);\n                    if (state.includes(pair)) {\n                      return state;\n                    }\n\n                    return [...state, pair];\n                  });\n                }\n              }}\n            >\n              {selectedItems[1].parent === selectedItems[0].id\n                ? '연결 해제'\n                : '연결하기'}\n            </button>\n          )}\n        </div>\n\n        <ul className={styles.itemsList}>\n          {rootedIds.map((id) => (\n            <li key={id}>\n              <ListItem id={id} />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <HowToUse isOpened={isHowToUseOpened} setIsOpened={setIsHowToUseOpened} />\n    </>\n  );\n}\n","import './App.css';\r\nimport { RecoilRoot } from 'recoil';\r\nimport MindMap from './components/MindMap';\r\nimport ToolMenu from './components/ToolMenu';\r\nimport ItemsList from './components/ItemsList';\r\n\r\nfunction App() {\r\n  return (\r\n    <RecoilRoot>\r\n      <div className=\"App\">\r\n        <ItemsList />\r\n        <MindMap />\r\n        <ToolMenu />\r\n      </div>\r\n    </RecoilRoot>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}